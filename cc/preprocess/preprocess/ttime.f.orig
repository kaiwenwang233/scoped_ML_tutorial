c Determine the fastest traveltime between a source
c at depth=depth(km) and a receiver at distance=delta(km).

	subroutine ttime(delta, depth, nl, v, top, t, ain)

	implicit none

	include 'preprocess.inc'

c        integer*4 MAXLAY
c	parameter(MAXLAY=70)

c	Parameters:
	real	delta
	real	depth
	integer	nl
	real	v(MAXLAY)
	real	top(MAXLAY)
	real	t
	real	ain

c	Local variables:
	integer	jl
	integer	kk
	real	tdir
c	real	thk(20)
	real	thk(MAXLAY)
	real	tkj
	real	tref
	real	u
c	real	vsq(20)
	real	vsq(MAXLAY)
	real	x
	real	xovmax

c	character rcsid*150

c	compile and link for S
c	f77 -c ttime.f
c	ld -r -dn ttime.o
c	mv a.out ttime.o

c	subroutine direct1 is used to compute the direct ray
c	traveltime and sine of takeoff angle.

c	subroutine refract is used to compute the fastest
c	refracted ray traveltime.  It calls subroutine tiddid.

c	subroutine vmodel extract needed information from the
c	layered velocity model.

c	input:
c	delta	epicentral distance in km
c	depth	focal depth of source in km
c	nl	number of layers in velocity model
c	v	velocity in each layer
c	top	depth to top of layer

c	output:
c	t	minimum traveltime
c	ain	angle of emergence at source


c	call vmodel to set-up model and locate source in it

	call vmodel(nl,v,top,depth,vsq,thk,jl,tkj)

c  output:
c      vsq(l) - v(l) ** 2
c      thk(l) - thickness of layer l
c          jl - event layer
c         tkj - depth of event in event layer

c	call refract to find fastest refracted arrival

	call refract(nl,v,vsq,thk,jl,tkj,delta,
     &			kk,tref,xovmax)

c  output:   kk - refracting layer for fastest refracted ray
c          tref - travel time of fastest refracted ray
c        xovmax - an upper bound on delta for which the direct ray
c                 can be the first arrival


c	if delta <= xovmax, them
c	call direct1 to find the direct ray traveltime
c	otherwise tref is the minimum traveltime

c	assume for now refracted path is faster

	t=tref

c	compute the takeoff angle
	if (kk.gt.0) then

	u=v(jl)/v(kk)
	ain=asin(u)*57.2958
	endif

	if (delta.le.xovmax) then

	call direct1(nl,v,vsq,thk,jl,tkj,delta,depth,tdir,u,x)

c  output:  tdir - direct ray travel time
c              u - sine of the takeoff angle
c              x - horizontal travel distance in the event layer
c

c	compare the traveltimes

	if (tref.gt.tdir) then

c	direct time is the minimum traveltime

	t=tdir
	ain=180-asin(u)*57.2958

	endif
	endif

	return
c *****	end of subroutine ttime *****
	end

c%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

c Compute travel time, etc., for direct (upward-departing) ray

	subroutine direct1(nl,v,vsq,thk,jl,tkj,delta,depth,tdir,u,x)

	implicit none

        include 'preprocess.inc'

c	Parameters:
	integer	nl	! Number of layers		(input)
c	real	v(nl)	! Layer wave speeds		(input)
c	real	vsq(nl)	! Squares of wave speeds	(input)
c	real	thk(nl)	! Layer thicknesses		(input)
	real	v(MAXLAY)	! Layer wave speeds		(input)
	real	vsq(MAXLAY)	! Squares of wave speeds	(input)
	real	thk(MAXLAY)	! Layer thicknesses		(input)
	integer	jl	! Event layer			(input)
	real	tkj	! Event depth within layer jl	(input)
	real	delta	! Epicentral distance		(input)
	real	depth	! Event depth			(input)
	real	tdir	! Direct-ray travel time	(output)
	real	u	! Sine of take-off angle	(output)
	real	x	! Horizontal travel distance in event layer (output)

c       For the direct seismic ray from an event to a receiver in
c  a layered velocity structure, direct predicts the travel time, the
c  sine of the takeoff angle, and the horizontal distance of travel in
c  the event layer.  The receiver must be located at the top of layer
c  1 and the event must be located below layer 1.  Low velocity
c  layers are permitted.
c       To find the takeoff angle of the ray, a numerical approach
c  is required.  The basic scheme adopted here is the method of false
c  position.  (see acton, 1970, 'numerical methods that work,' for
c  example.)  First, the characteristics of the fastest layer
c  between the event and the surface are determined.  These permit
c  placing definite lower and upper bounds, ua and ub, on the
c  sine of the takeoff angle.  In turn, lower and upper bounds, xa
c  and xb, on the horizontal travel distance in the event layer are
c  determined.  The total horizontal travel distance for a ray with
c  with horizontal travel distance x in the event layer is denoted
c  by del, and the zero of del - delta is obtained by using xa and
c  xb as initial guesses for x in the method of false position
c  from x and tkj, the depth of the event below the top of the event
c  layer, the sine of the takeoff angle, u , is calculated.
c       From u and x, tdir is found by summing the travel time in
c  each layer.  finally, a slight correction to tdir is made, based
c  on the misfit between the final del and delta.

c	Local variables:
	real		del		! Computed distance
	real		dela, delb	! Distances corresponding to xa, xb
c	doubleprecision	hypot		! Hypoteneuse function
	integer		j1
	integer		kount
	integer		l
	integer		lmax
	real		r
	real		tklmax
	real		usq
	real		ua, uasq
	real		ub, ubsq
	real		ubdiv
	real		vlmax
	real		xa, xb		! Bounds on x
	real		xtest

c	character rcsid*150

	if (jl .eq. 1) then
c	   Focus in surface layer
c	   r = hypot(depth, delta)
	   r = sqrt(depth**2 + delta**2)
c	   r= depth
	   tdir = r/v(1)
	   u = delta/r
	   x = delta
	   return
	endif

c     Find the fastest layer, lmax, above and including jl
      lmax = jl
      tklmax = tkj
      vlmax = v(jl)
      j1 = jl-1
      do 23184 l=1,j1
         if (.not.(v(l).gt.vlmax)) goto 23186
            lmax = l
            tklmax = thk(l)
            vlmax = v(l)
23186    continue
23184 continue

C CHANGE BY E.KISSLING MARCH 1984
      IF(tklmax.le.0.05) tklmax = 0.05

c     Find initial bounds on the sine of the takeoff angle
      ua = (v(jl)/vlmax)*delta/sqrt(delta**2+depth**2)
      ub = (v(jl)/vlmax)*delta/sqrt(delta**2+tklmax**2)

c     Calculate horizontal travel distances
      uasq = ua**2
      ubsq = ub**2
C CHANGE BY E.KISSLING MARCH 1984
      if (ubsq.ge.1.) ubsq = 0.99999
      if (uasq.ge.1.) uasq = 0.99999
      xa = tkj*ua/sqrt(1.0-uasq)
      if (.not.(lmax.eq.jl)) goto 23188
         xb = delta
         goto 23189
23188 continue
      xb = tkj*ub/sqrt(1.0-ubsq)
23189 continue
      dela = xa
      delb = xb
      do 23190 l=1,j1
         dela = dela+thk(l)*ua/sqrt(vsq(jl)/vsq(l)-uasq)
         ubdiv = sqrt(vsq(jl)/vsq(l)-ubsq)
         if (ubdiv.GT.1.e-20) GOTO 1002
c	    No write statements for Splus!
            ubdiv = 1.e-20
 1002    continue
         delb = delb+thk(l)*ub/sqrt(vsq(jl)/vsq(l)-ubsq)
23190 continue

c     Loop to find the zero of del-delta by the method of false position
      do 23192 kount=1,25
         if (.not.((delb-dela).lt.0.02)) goto 23194
            x = 0.5*(xa+xb)
            u = x/sqrt(x**2+tkj**2)
            usq = u**2
            goto 23193	! break
23194    continue
         x = xa+(delta-dela)*(xb-xa)/(delb-dela)
         u = x/sqrt(x**2+tkj**2)
         usq = u**2
         del = x
         do 23196 l=1,j1
            del = del+thk(l)*u/sqrt(vsq(jl)/vsq(l)-usq)
23196    continue
         xtest = del-delta
         if (abs(xtest).lt.0.02) goto 23193	! break
         if (.not.(xtest.lt.0.0)) goto 23200
            xa = x
            dela = del
            goto 23201
23200    continue
            xb = x
            delb = del
23201    continue
23192 continue
23193 continue

c     Calculate direct-ray travel time
      tdir = sqrt(x**2+tkj**2)/v(jl)
      do 23202 l=1,j1
         tdir = tdir+thk(l)*v(jl)/(vsq(l)*sqrt(vsq(jl)/vsq(l)-usq))
23202 continue
      tdir = tdir-(u/v(jl))*(del-delta)
      return
c  ***** end of subroutine direct1 *****
      end


c%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

c Find "refracted" ray with smallest travel time

	subroutine refract (nl, v, vsq, thk, jl, tkj, delta,
     &	kk, tref, xovmax)

	implicit none

        integer*4 MAXLAY
	parameter(MAXLAY=20)

c	Parameters:
	integer	nl
	real	v(MAXLAY)
	real	vsq(MAXLAY)
	real	thk(MAXLAY)
	integer	jl
	real	tkj
	integer	kk
	real	tref
	real	xovmax

c       For refracted rays in a layered earth model, refract
c  determines the fastest travel time, tref, the layer
c  in which the fastest ray is refracted, kk, the
c  critical distance for refraction in that layer,
c  didjkk, and an upper bound on delta for which a
c  direct ray can be a first arrival, xovmax.  Refract
c  allows for the possibility of low velocity layers.
c       Note that there may not be a refracted ray, either because
c  all layers below the event layer are low velocity layers or
c  because for all layers below the event layer which are not low
c  velocity layers the critical distance exceeds delta.  In such
c  cases tref, didjkk, and xovmax are set very large, kk is set to
c  zero, and refract returns to the calling program.
c
c  input:  nl - number of layers
c        v(l) - velocity of layer l
c      vsq(l) - v(l) ** 2
c      thk(l) - thickness of layer l
c          jl - event layer
c         tkj - depth of event in event layer
c       delta - horizontal distance between event and receiver
c
c  output:   kk - refracting layer for fastest refracted ray
c          tref - travel time of fastest refracted ray
c        didjkk - critical distance for refraction in layer kk
c        xovmax - an upper bound on delta for which the direct ray can
c                       be the first arrival
c  internal arrays:
c
c       tr(m) - travel time for refraction in layer m
c     tinj(m) - traveltime intercept
c      tid(m) - terms in travel time intercept which are
c                     independent of tkj
c     didj(m) - critical distance
c      did(m) - terms in critical distance which are
c                     independent of tkj
c
c
c  Call subroutine tiddid to evaluate tid(m) and
c  did(m), the terms in the travel time intercept and
c  critical distance for a ray refracted in layer m
c  that are independent of tkj.

c	Local variables:
	real	delta
	real	did(20)
	real	didj(20)
        integer j1
	integer	jx
	integer	l
	integer	lx
	integer	m
	integer	m1
	real	sqt
	real	tid(20)
	real	tim
	real	tinj(20)
	real	tr(20)

c	character rcsid*150

c  determine tref, kk, didjkk
      call tiddid(jl,nl,v,vsq,thk,tid,did)
      tref=100000.
      j1=jl+1
      do 23151m=j1,nl
      if(.not.(tid(m).eq.100000.))goto 23153
      tr(m)=100000.
      goto 23154
23153 continue
      sqt=sqrt(vsq(m)-vsq(jl))
      tinj(m)=tid(m)-tkj*sqt/(v(m)*v(jl))
      didj(m)=did(m)-tkj*v(jl)/sqt
      tr(m)=tinj(m)+delta/v(m)
      if(.not.(didj(m).gt.delta))goto 23155
      tr(m)=100000.
23155 continue
23154 continue
      if(.not.(tr(m).lt.tref))goto 23157
      tref=tr(m)
      kk=m
23157 continue
23151 continue

c   if there is no refracted ray:

      if(.not.(tref.eq.100000.))goto 23159
      xovmax=100000.
      kk=0
      return
23159 continue

c   if there is a refracted ray, determine xovmax:
c   find lx, the 1st layer below the event layer which
c   is not a low velocity layer

      m=jl+1
      continue
23161 if(.not.(tid(m).eq.100000.))goto 23162
      m=m+1
      goto 23161
23162 continue
      lx=m

c   check whether the event is in the 1st layer

      if(.not.(jl.eq.1))goto 23163
      xovmax=tinj(lx)*v(lx)*v(1)/(v(lx)-v(1))
      return
23163 continue
      m=jl

c   find jx, the 1st layer above and including the event
c   layer which is not a low velocity layer

      continue
23165 continue
      tid(m)=0.
      m1=m-1
      do 23168l=1,m1
      if(.not.(vsq(m).le.vsq(l)))goto 23170
      tid(m)=100000.
      goto 23171
23170 continue
      sqt=sqrt(vsq(m)-vsq(l))
      tim=thk(l)*sqt/(v(l)*v(m))
      tid(m)=tid(m)+tim
23171 continue
23168 continue
      m=m-1

c  decide whether or not jx=1 and calculate xovmax

      if(.not.(tid(m+1).lt.100000..or.m.eq.1))goto 23165
      if(.not.(tid(m+1).lt.100000.))goto 23172
      jx=m+1
      xovmax=(tinj(lx)-tid(jx))*v(lx)*v(jx)/(v(lx)-v(jx))
      goto 23173
23172 continue

c   jx=1

      xovmax=tinj(lx)*v(lx)*v(1)/(v(lx)-v(1))
23173 continue
      return
c  ***** end of subroutine refract *****
      end


c%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

c Extract needed information from the layered velocity model.

	subroutine vmodel(nl, v, top, depth, vsq, thk, jl, tkj)

	implicit none

        integer*4 MAXLAY
	parameter(MAXLAY=20)

c	Parameters:
	integer	nl
	real	v(MAXLAY)
	real	vsq(MAXLAY)
	real	top(MAXLAY)
	real	depth
	real	thk(MAXLAY)
	integer	jl
	real	tkj

c  input:     nl - number of layers
c           v(l) - velocity of layer l
c	     top - depth to top of layer l
c          depth - depth of event

c         vsq(l) = v(l) ** 2
c         thk(l) - thickness of layer l
c             jl - event layer
c            tkj - depth of event from top of event layer

c	Local variables:
	integer	i

c	character rcsid*150

c	compute square of layer velocity
	do 10 i=1,nl
   10	vsq(i)=v(i)*v(i)

c	determine layer thickness and
c	find layer containing event,

	jl=nl

	do 20 i=1,nl

c	Important note:  if (depth.lt.top(i)) will
c	lead to incorrect results for traveltime
	if (depth.le.top(i)) then
	jl=i-1
	goto 25
	endif
   20	continue
   25	continue

	do 30 i=1,nl-1
   30	thk(i)=top(i+1)-top(i)

c	compute depth from top of layer to source

	tkj=depth-top(jl)

	return
c *****	end of subroutine vmodel *****
	end

c%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

c Compute intercept times and critical distances for "refracted" rays

	subroutine tiddid (jl, nl, v, vsq, thk, tid, did)

	implicit none

        integer*4 MAXLAY
	parameter(MAXLAY=20)

c	Parameters:
	integer	jl
	integer	nl
	real	v(MAXLAY)	! (1..nl)
	real	vsq(MAXLAY)	! (1..nl)
	real	thk(MAXLAY)	! (1..nl)
	real	tid(20)	! (1..20)
	real	did(20)	! (1..20)

c       Determines the travel time intercept and critical
c  distance for a seismic ray in a layered earth model
c  originating at the top of layer jl, refracting in
c  layer m, and terminating at the top of layer 1.
c
c  input:       jl - event layer
c               nl - number of layers
c             v(l) - velocity of layer l
c           vsq(l) - velocity squared
c           thk(l) - thickness of layer l
c  output:
c           tid(m) - travel time intercept for
c                      refraction in layer m
c           did(m) - critical distance

c	Local variables:
	real	did1, did2
	real	dimm
	integer	j1
	integer	l
	integer	m
	integer	m1
	real	sqt
	real	tid1, tid2
	real	tim

c	character rcsid*150

      j1=jl+1
      do 23174m=j1,nl
      tid(m)=0.
      did(m)=0.
      tid1=0.
      tid2=0.
      did1=0.
      did2=0.
      m1=m-1
      do 23176l=1,m1
      if(.not.(vsq(m).le.vsq(l)))goto 23178

c   if m is a low velocity layer, set tid and did to
c   very large values

      tid(m)=100000.
      did(m)=100000.
      goto 23179
23178 continue
      sqt=sqrt(vsq(m)-vsq(l))
      tim=thk(l)*sqt/(v(l)*v(m))
      dimm=thk(l)*v(l)/sqt
      if(.not.(l.lt.jl))goto 23180

c   sum for layers above event layer

      tid1=tid1+tim
      did1=did1+dimm
      goto 23181
23180 continue

c   sum for layers below and including the event layer

      tid2=tid2+tim
      did2=did2+dimm
23181 continue
23179 continue
23176 continue
      if(.not.(tid(m).ne.100000.))goto 23182

c   calculate tid and did if m is not a low velocity layer

      tid(m)=tid1+2*tid2
      did(m)=did1+2*did2
23182 continue
23174 continue
      return
c  ***** end of subroutine tiddid *****
      end
